---
import Layout from '../../layouts/Layout.astro';
import Container from '../../components/Container.astro';
import { getCollection } from 'astro:content';

const posts = (await getCollection('blog'))
  .filter(post => !post.data.draft)
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf());

// Get all unique tags
const allTags = [...new Set(posts.flatMap(post => post.data.tags))].sort();

function formatDate(date: Date) {
  return new Intl.DateTimeFormat('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  }).format(date);
}
---

<Layout title="Blog | Engineering Insights & Technical Deep Dives | Crab Labs">
  <div class="pt-16 bg-gray-50">
    <Container>
      <div class="content-container">

        <!-- Search and Filter Section -->
        <section class="relative mb-16">
          <div class="bg-white rounded-2xl p-12 shadow-sm border border-gray-100">
        <div class="grid md:grid-cols-3 gap-4">
          <!-- Search Bar -->
          <div class="md:col-span-2">
            <label for="search" class="block text-sm font-medium text-gray-700  mb-2">
              Search Posts
            </label>
            <div class="relative">
              <input 
                type="text" 
                id="search" 
                placeholder="Search by title, description, or content..."
                class="w-full px-4 py-3 pl-12 bg-gray-50  border border-gray-200  rounded-xl text-gray-900  placeholder-gray-500 focus:outline-none focus:border-orange-500  transition-colors"
              />
              <svg class="absolute left-4 top-3.5 w-5 h-5 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
          </div>

          <!-- Sort Dropdown -->
          <div>
            <label for="sort" class="block text-sm font-medium text-gray-700  mb-2">
              Sort By
            </label>
            <select 
              id="sort" 
              class="w-full px-4 py-3 bg-gray-50  border border-gray-200  rounded-xl text-gray-900  focus:outline-none focus:border-orange-500  transition-colors"
            >
              <option value="date-desc">Newest First</option>
              <option value="date-asc">Oldest First</option>
              <option value="title-asc">Title (A-Z)</option>
              <option value="title-desc">Title (Z-A)</option>
            </select>
          </div>
        </div>

        <!-- Tags Filter -->
        <div class="mt-6">
          <label class="block text-sm font-medium text-gray-700  mb-3">
            Filter by Tags
          </label>
          <div class="flex flex-wrap gap-2">
            <button 
              data-tag="all" 
              class="tag-filter px-4 py-2 text-sm font-medium bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
            >
              All Posts
            </button>
            {allTags.map(tag => (
              <button 
                data-tag={tag} 
                class="tag-filter px-4 py-2 text-sm font-medium bg-gray-100  text-gray-700  rounded-lg hover:bg-orange-100  hover:text-orange-600  transition-colors"
              >
                {tag}
              </button>
            ))}
          </div>
        </div>

        <!-- Results Count -->
        <div class="mt-6 text-sm text-gray-600 ">
          Showing <span id="results-count">{posts.length}</span> of {posts.length} posts
        </div>
        </section>

        <!-- No Results Message -->
      <div id="no-results" class="hidden text-center py-20 bg-gray-50  rounded-2xl mb-8">
        <svg class="w-16 h-16 mx-auto mb-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.172 16.172a4 4 0 015.656 0M9 10h.01M15 10h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
        </svg>
        <p class="text-lg text-gray-600 ">
          No posts found matching your criteria.
        </p>
        <button 
          id="clear-filters" 
          class="mt-4 px-6 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
        >
          Clear Filters
        </button>
      </div>

        <!-- Blog Posts Grid -->
      <div id="posts-grid" class="grid gap-8 md:grid-cols-2 lg:grid-cols-3">
        {posts.map((post: any) => (
          <article 
            class="blog-post bg-white  rounded-2xl overflow-hidden border border-gray-200  hover:border-orange-500 group flex flex-col"
            data-title={post.data.title.toLowerCase()}
            data-description={post.data.description.toLowerCase()}
            data-tags={post.data.tags.join(',')}
            data-date={post.data.pubDate.toISOString()}
          >
            {post.data.heroImage && (
              <div class="aspect-video overflow-hidden bg-gray-100 ">
                <img 
                  src={post.data.heroImage} 
                  alt={post.data.title}
                  class="w-full h-full object-contain "
                />
              </div>
            )}
            
            <div class="p-6 flex flex-col flex-grow">
              {post.data.featured && (
                <span class="inline-block px-3 py-1 text-xs font-bold bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-full mb-3 self-start shadow-md">
                  Featured
                </span>
              )}
              
              <h2 class="text-xl font-bold text-gray-900  mb-3 ">
                <a href={`/blog/${post.slug}/`} class="hover:underline">
                  {post.data.title}
                </a>
              </h2>
              
              <p class="text-gray-700  mb-4 line-clamp-3 flex-grow">
                {post.data.description}
              </p>
              
              <div class="flex items-center justify-between text-sm mb-4">
                <time datetime={post.data.pubDate.toISOString()} class="text-gray-600 ">
                  {formatDate(post.data.pubDate)}
                </time>
                
                <a 
                  href={`/blog/${post.slug}/`} 
                  class="inline-flex items-center text-orange-500 hover:text-orange-600 font-medium transition-colors group"
                >
                  Read more
                  <svg class="w-4 h-4 ml-1 transform " fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7"/>
                  </svg>
                </a>
              </div>
              
              {post.data.tags.length > 0 && (
                <div class="flex flex-wrap gap-2 pt-4 border-t border-gray-200 ">
                  {post.data.tags.map((tag: string) => (
                    <span class="px-3 py-1 text-xs bg-gray-100  text-gray-700  rounded-md">
                      #{tag}
                    </span>
                  ))}
                </div>
              )}
            </div>
          </article>
        ))}
      </div>

      </div>
    </Container>
  </div>
</Layout>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const searchInput = document.getElementById('search') as HTMLInputElement;
  const sortSelect = document.getElementById('sort') as HTMLSelectElement;
  const tagButtons = document.querySelectorAll('.tag-filter');
  const postsGrid = document.getElementById('posts-grid');
  const posts = document.querySelectorAll('.blog-post');
  const resultsCount = document.getElementById('results-count');
  const noResults = document.getElementById('no-results');
  const clearFilters = document.getElementById('clear-filters');
  
  let currentTag = 'all';
  let searchTerm = '';

  // Search functionality
  searchInput?.addEventListener('input', function(e) {
    searchTerm = (e.target as HTMLInputElement).value.toLowerCase();
    filterPosts();
  });

  // Sort functionality
  sortSelect?.addEventListener('change', function() {
    sortPosts();
  });

  // Tag filter functionality
  tagButtons.forEach(button => {
    button.addEventListener('click', function(e) {
      const clickedButton = e.target as HTMLElement;
      const tag = clickedButton.dataset.tag || 'all';
      
      // Update active state
      tagButtons.forEach(btn => {
        btn.classList.remove('bg-orange-500', 'text-white');
        btn.classList.add('bg-gray-100', '', 'text-gray-700', '');
      });
      
      clickedButton.classList.remove('bg-gray-100', '', 'text-gray-700', '');
      clickedButton.classList.add('bg-orange-500', 'text-white');
      
      currentTag = tag;
      filterPosts();
    });
  });

  // Clear filters
  clearFilters?.addEventListener('click', function() {
    searchInput.value = '';
    searchTerm = '';
    currentTag = 'all';
    
    // Reset tag buttons
    tagButtons.forEach(btn => {
      const button = btn as HTMLElement;
      if (button.dataset.tag === 'all') {
        button.classList.add('bg-orange-500', 'text-white');
        button.classList.remove('bg-gray-100', '', 'text-gray-700', '');
      } else {
        button.classList.remove('bg-orange-500', 'text-white');
        button.classList.add('bg-gray-100', '', 'text-gray-700', '');
      }
    });
    
    filterPosts();
  });

  function filterPosts() {
    let visibleCount = 0;
    
    posts.forEach(post => {
      const postElement = post as HTMLElement;
      const title = postElement.dataset.title || '';
      const description = postElement.dataset.description || '';
      const tags = postElement.dataset.tags?.split(',') || [];
      
      const matchesSearch = searchTerm === '' || 
        title.includes(searchTerm) || 
        description.includes(searchTerm) ||
        tags.some(tag => tag.toLowerCase().includes(searchTerm));
      
      const matchesTag = currentTag === 'all' || tags.includes(currentTag);
      
      if (matchesSearch && matchesTag) {
        postElement.style.display = 'flex';
        visibleCount++;
      } else {
        postElement.style.display = 'none';
      }
    });
    
    // Update results count
    if (resultsCount) {
      resultsCount.textContent = visibleCount.toString();
    }
    
    // Show/hide no results message
    if (postsGrid && noResults) {
      if (visibleCount === 0) {
        postsGrid.style.display = 'none';
        noResults.classList.remove('hidden');
      } else {
        postsGrid.style.display = 'grid';
        noResults.classList.add('hidden');
      }
    }
  }

  function sortPosts() {
    const sortValue = sortSelect?.value || 'date-desc';
    const postsArray = Array.from(posts);
    
    postsArray.sort((a, b) => {
      const aElement = a as HTMLElement;
      const bElement = b as HTMLElement;
      
      switch(sortValue) {
        case 'date-asc':
          return new Date(aElement.dataset.date || '').getTime() - new Date(bElement.dataset.date || '').getTime();
        case 'date-desc':
          return new Date(bElement.dataset.date || '').getTime() - new Date(aElement.dataset.date || '').getTime();
        case 'title-asc':
          return (aElement.dataset.title || '').localeCompare(bElement.dataset.title || '');
        case 'title-desc':
          return (bElement.dataset.title || '').localeCompare(aElement.dataset.title || '');
        default:
          return 0;
      }
    });
    
    // Reorder posts in the DOM
    postsArray.forEach(post => {
      postsGrid?.appendChild(post);
    });
  }
});
</script>